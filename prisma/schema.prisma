// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  clerkId   String   @unique @db.Text
  email     String   @unique @db.Text
  username  String   @unique
  avatar    String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  Member[]
  servers  Server[]
  channels Channel[]
}

model Server {
  id        Int       @id @default(autoincrement())
  name      String
  ownerId   Int
  members   Member[]
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  ImageUrl ServerImage[]
}

model ServerImage {
  id        Int      @id @default(autoincrement())
  url       String
  serverId  Int
  key       String
  createdAt DateTime @default(now())
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

enum MemberRole {
  ADMIN
  MEMBER
  MODERATOR
}

model Member {
  id        Int        @id @default(autoincrement())
  userId    Int
  serverId  Int
  role      MemberRole @default(MEMBER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

enum ChannelType {
  TEXT
  VOICE
  AUDIO
}

model Channel {
  id        Int         @id @default(autoincrement())
  name      String
  serverId  Int
  userId    Int
  type      ChannelType @default(TEXT)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
}
